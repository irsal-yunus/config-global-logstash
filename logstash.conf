## monitoring APM agent license Trial
# input {
#     beats {
#         port => 5044
#     }
# }

# filter {
#     if [@metadata][beat] == "apm" {
#         if [processor][event] == "sourcemap" {
#             mutate {
#                 add_field => { "[@metadata][index]" => "%{[@metadata][beat]}-%{[@metadata][version]}-%{[processor][event]}" }
#             }
#         } else {
#             mutate {
#                 add_field => { "[@metadata][index]" => "%{[@metadata][beat]}-%{[@metadata][version]}-%{[processor][event]}-%{+yyyy.MM.dd}" }
#             }
#         }
#     }
# }

# output {
#     elasticsearch {
#         hosts => ["http://localhost:9200"]
#         index => "%{[@metadata][index]}"
#         user => "elastic"
#         password => "P@l4lup1t4k5"
#     }
# }

## Monitoring Mysql
# input {
#   jdbc {
#   clean_run => true
#     jdbc_driver_library => "C:\logstash-7.13.4\com.mysql.jdbc_5.1.5.jar"
#     jdbc_driver_class => "com.mysql.jdbc.Driver"
#     jdbc_connection_string => "jdbc:mysql://192.168.1.7:3306/db_jobschema"
#     jdbc_user => "root"
#     jdbc_password => "P@ssw0rd2019!!"
#     schedule => "* * * * *"
#     statement => "SELECT jobid,jobname,executiontime,jobstatus from logplugin WHERE jobid > :sql_last_value"
#     use_column_value => true
#     tracking_column => "jobid"
#   }
# }
# output {
#    elasticsearch {
#        hosts => ["127.0.0.1:9200"]
#        index => "logstashmysql"
#        user => "elastic"
#        password => "P@l4lup1t4k5"
#    }
# stdout { codec => rubydebug }
# }

## monitoring trafic API
input {
  http_poller {
    urls => {
      test1 => "http://localhost:8080"
      test2 => {
        # Supports all options supported by ruby's Manticore HTTP client
        method => get
        user => "admin"
        password => "vPr0tect"
        url => "http://localhost:8080/api/dashboard/backup-destination-stats"
        headers => {
          Accept => "application/json"
        }
     }
    }
    request_timeout => 60
    # Supports "cron", "every", "at" and "in" schedules by rufus scheduler
    schedule => { cron => "* * * * * UTC"}
    codec => "json"
    # A hash of request metadata info (timing, response headers, etc.) will be sent here
    metadata_target => "http_poller_metadata"
  }
}

output {
  stdout {
    codec => rubydebug
  }
}

# input {
# http_poller {
#     urls => {
#         urlname => "http://172.18.133.205:7777/api/Rate"
#     }
#     request_timeout => 60
#     schedule => { every => "20s" }
#     codec => "line"
# }
# }
# output {
#     elasticsearch {
#         hosts => ["localhost:9200"]
#         index => "logstash_http_poller"
#         user => "elastic"
#         password => "P@l4lup1t4k5"
#     }
# stdout { codec => rubydebug }
# }


## Monitoring Apache
# input {
#     file {
#         path => "C:/logstash-7.13.4/data/apache.log"
#         type => "apache"
#         start_position => "beginning"
#     }
# }
# output {
#     elasticsearch {
#         hosts => ["localhost:9200"]
#         index => "apachelog"
#         user => "elastic"
#         password => "P@l4lup1t4k5"
#     }
# stdout { codec => rubydebug }
# }

# input {
#   beats {
#     port => 5044

# }

# filter {
#     grok {
#       match => { "message" => "%{COMBINEDAPACHELOG}" }

#     date {
#       match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]

#     geoip {
#       source => "clientip"

# }

# output {
#   elasticsearch {
#     hosts => ["localhost:9200"]

# }
